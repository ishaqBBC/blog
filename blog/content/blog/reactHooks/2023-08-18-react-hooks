---
layout: blog
title: "Cool React Hooks"
date: dateT17:08:34.142Z
---

## TLDR
date


### Use media query hook
What us it?  useMediaQuery is a custom hook that listens for media query changes and returns whether the query currently matches. (It is a wrapper around the matchMedia API.). The `query` string passed in is a `media query` 

useMediaQuery.jsx
```Javascript

import * as React from "react";

function useMediaQuery(query) {
  const subscribe = React.useCallback(
    (callback) => {
      const matchMedia = window.matchMedia(query);

      matchMedia.addEventListener("change", callback);
      return () => {
        matchMedia.removeEventListener("change", callback);
      };
    },
    [query]
  );

  const getSnapshot = () => {
    return window.matchMedia(query).matches;
  };

  const getServerSnapshot = () => {
    throw Error("useMediaQuery is a client-only hook");
  };

  return React.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
}

export default useMediaQuery;
```

use in application... 
App.jsx
```javascript
import {useMediaQuery} from '../useMediaQuery';
import 'style.css'

const App = () => {
const isSmallDevice = useMediaQuery("only screen and (max-width : 768px)");
  const isMediumDevice = useMediaQuery(
    "only screen and (min-width : 769px) and (max-width : 992px)"
  );
  const isLargeDevice = useMediaQuery(
    "only screen and (min-width : 993px) and (max-width : 1200px)"
  );
  const isExtraLargeDevice = useMediaQuery(
    "only screen and (min-width : 1201px)"
  );

  return (
      <h1 className={isSmallDevice ? "active" : ""}> Mobile </h2>
  )
```
style.css
```css
.active {
    border: 2px solid red;
}
```

## Visibility Change hook

```javascript
import React, {useSyncExternalStore} from 'react';

function subcribe () {
  function onVisChange (event) {
    if(document.visibilityState === 'visible'){
      document.title = 'Here'
    }else if(document.visibilityState === 'hidden') {
      document.title = 'Get back here'
    }
  }
  document.addEventListener('visibilitychange', onVisChange); 
  return () => document.removeEventListener('visibilitychange', onVisChange); 
}

function getSnapShot () {
  return document.visibilityState;
}
const useVisChange = () => {
  const visChange = useSyncExternalStore(subcribe, getSnapShot); 
  return visChange; 

}
```
In use calling the hook
```javascript
export function App(props) {
  const visChange = useVisChange();
  return (
    <div className='App'>
      {visChange}
    </div>
  );
}

```