---
layout: blog
title: "AWS 35: ELB Sticky Sessions"
date: 2023-09-29T10:01:19.482Z
---

## TLDR

Sticky sessions, also known as session affinity, can be enabled on your AWS Elastic Load Balancer (ALB), Classic Load Balancer (CLB), or Network Load Balancer (NLB) to ensure that client requests are consistently directed to the same backend instance. This blog explores the concept of stickiness, its use cases, and the two types of cookies involved (application-based and duration-based). We'll also walk you through enabling and disabling sticky sessions on your load balancer.

When it comes to managing web applications hosted on AWS, ensuring a smooth and consistent user experience is paramount. One key feature that can help achieve this is sticky sessions, also referred to as session affinity. In this blog post, we will delve into the world of sticky sessions, explaining what they are, how they work, and why they might be essential in certain scenarios.

## Sticky Sessions Explained

Imagine a scenario where you have an [Application Load Balancer (ALB)](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-08-18-aws-29-applicaton-load-balancer/) distributing incoming traffic to multiple [EC2 instances](https://magicishaqblog.netlify.app/2023-02-24-aws-10-EC2/). Ordinarily, the ALB evenly distributes requests across all instances. However, in some cases, you might want a user who initiated a session to always be directed to the same backend instance. This is where sticky sessions come into play.

With sticky sessions enabled, a client making multiple requests to the load balancer will consistently connect to the same backend instance. For instance, if User 1's first request is directed to EC2 Instance 1, all subsequent requests from User 1 will also be sent to Instance 1. This behavior ensures that important session data, such as user logins, remains intact.

The diagram below shows this inaction
![diagram of sticky sessions where user 1s request is made to the instance 1, same with user 2s request going to instance 2](/blog/src/images/35/35-1.png)

## Use Cases for Sticky Sessions

Sticky sessions are particularly useful in scenarios where maintaining user sessions is crucial. Here are a few common use cases:

1. **User Authentication**: When a user logs in, their session information is stored on a specific backend instance. Sticky sessions ensure that subsequent requests related to that session are consistently handled by the same instance.

2. **E-commerce Shopping Carts**: In e-commerce applications, maintaining the contents of a user's shopping cart is essential. Sticky sessions help by directing all requests pertaining to a user's cart to the same instance.

3. **Gaming Applications**: Multiplayer online games often rely on sticky sessions to ensure that players remain connected to the same game server throughout their session.

## Types of Sticky Session Cookies

Sticky sessions are enabled by using cookies. There are two primary types of cookies involved:

1. **Application-Based Cookies**: These are custom cookies generated by your application. You can include any custom attributes required by your application in these cookies. The cookie name must be specified individually for each target group.

2. **Duration-Based Cookies**: These cookies are generated by the load balancer itself. They have an expiration time based on a specific duration, which can be set by either your application or the load balancer.

It's important to note that certain cookie names, like `AWSALB`, `AWSALBAPP`, and `AWSALBTG`, are reserved and cannot be used.

## Enabling Sticky Sessions

Enabling sticky sessions on your load balancer is relatively straightforward. You can configure it at the target group level. There are two options for stickiness: load balancer-generated cookies (duration-based) or application-based cookies.

Once sticky sessions are enabled, your load balancer will handle the routing of requests accordingly, ensuring a consistent user experience.

## Conclusion

Sticky sessions are a valuable tool for maintaining user sessions and ensuring a seamless experience in AWS-hosted web applications. Whether you need to preserve user logins, shopping carts, or gaming sessions, understanding and implementing sticky sessions can greatly enhance the reliability of your application. Remember that you can enable and disable sticky sessions as needed, depending on your specific requirements.

As you continue your journey toward earning your AWS developer certification, understanding concepts like sticky sessions is crucial.

## Recap

Following the previous blogs in the series.

- [AWS 1: BookClub Overview](https://magicishaqblog.netlify.app/aws/)
- [AWS 2: Getting Started](https://magicishaqblog.netlify.app/2023-01-23-aws-2-getting-started/)
- [AWS 3: UI Guide and Walk through](https://magicishaqblog.netlify.app/2023-01-27-aws-3-UI-guide-and-walkthrough)
- [AWS 4: IAM Creating Users and Groups](https://magicishaqblog.netlify.app/2023-01-28-aws-4-IAM)
- [AWS 5: IAM Policies](https://magicishaqblog.netlify.app/2023-02-03-aws-5-IAM-polices)
- [AWS 6: Quiz 1 ](https://magicishaqblog.netlify.app/aws-quiz-one)
- [AWS 7: AWS CLI , How to install the CLI](https://magicishaqblog.netlify.app/2023-10-03-aws-7-cli)
- [AWS 8: Access keys](https://magicishaqblog.netlify.app/2023-10-03-aws-8-access-keys)
- [AWS 9: AWS roles](https://magicishaqblog.netlify.app/2023-02-17-aws-9-roles)
- [AWS 10: EC2 Introduction](https://magicishaqblog.netlify.app/2023-02-24-aws-10-EC2/)
- [AWS 11: EC2 View and Instance Types](https://magicishaqblog.netlify.app/2023-03-03-aws-11-EC2-View-and-instance-types)
- [AWS 12: Security Groups](https://magicishaqblog.netlify.app/2023-03-10-aws-12-security-groups)
- [AWS 13: EC2 SSH-ing into an instance](https://magicishaqblog.netlify.app/2023-03-17-aws-13-ssh)
- [AWS 14: Instance Connect](https://magicishaqblog.netlify.app/2023-03-24-aws-14-instance-connect)
- [AWS 15: EC2 Purchasing Options](https://magicishaqblog.netlify.app/2023-03-31-aws-15-EC2-purchasing-options)
- [AWS 16: EBS Overview and Hands on](https://magicishaqblog.netlify.app/2023-04-14-aws-16-EBS-Overview-and-Hands-On)
- [AWS 17: EBS Snapshots](https://magicishaqblog.netlify.app/2023-04-21-aws-17-ebs-snapshots)
- [AWS 18: AMI Overview](https://magicishaqblog.netlify.app/2023-04-28-aws-18-ami)
- [AWS 19: AMI Hands On](https://magicishaqblog.netlify.app/2023-06-02-aws-19-AMI-Hands-On)
- [AWS 20: EC2 Instance Stores](https://magicishaqblog.netlify.app/2023-06-09-aws-20-EC2-Instance-Store)
- [AWS 21: EBS Volume types](https://magicishaqblog.netlify.app/2023-06-16-aws-21-EBS-volume-types)
- [AWS: 22: EBS Multi Attach](https://magicishaqblog.netlify.app/2023-06-23-aws-22-EBS-Multi-Attach)
- [AWS: 23: EFS Elastic File System](https://magicishaqblog.netlify.app/2023-06-30-aws-23-EFS-Elastic-File-System)
- [AWS 24: EFS Hands On](https://magicishasblog.netlify.app/2023-07-07-aws-24-EFS-Hands-On)
- [AWS 25: EFS vs EBS](https://magicishasblog.netlify.app/2023-07-14-aws-25-EFS-vs-EBS)
- [AWS 26: Quiz 2](https://magicishaqblog.netlify.app/quiz-2/2023-07-21-aws-26-quiz-2/)
- [AWS 27: High Availability and Scalability ](https://magicishaqblog.netlify.app/section6/2023-07-28-high_availability_and_scalability/)
- [AWS 28: Elastic Load Balancer](https://magicishaqblog.netlify.app/ElasticLoadBalancing/2023-08-11-aws-28-elastic-load-balancing/)
- [AWS 29: Application Load Balancer](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-08-18-aws-29-applicaton-load-balancer/)
- [AWS 30: Alb hands on (part 1)](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-08-25-aws-30-alb-hands-on/)
- [AWS 31: Alb hands on (part 2)](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-09-01-aws-31-more-on-alb/)
- [AWS 32: Network load balancer](https://magicishaqblog.netlify.app/NLB/2023-09-09-aws-32-network-load-balancer/)
- [AWS 33: Network load balancer (hands on)](https://magicishaqblog.netlify.app/NLB/2023-09-15-aws-33-network-load-balancer-hands-on/)
- [AWS 34: Gateway load balancer](TODO)
