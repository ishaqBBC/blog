---
layout: blog
title: "AWS 49: Amazon Aurora"
date: dateT17:08:34.142Z
---

## TLDR

## Introduction

Ladies and Gentlemen, let us delve into the intricacies of Amazon Aurora, a subject that has become increasingly pertinent in recent examinations. While a deep understanding may not be imperative, a high-level overview is indispensable for comprehending its functioning. This lecture aims to furnish you with precisely that.

## Overview of Amazon Aurora

To commence, it is crucial to acknowledge that Aurora stands as a proprietary technology meticulously crafted by AWS. Although not open-sourced, it boasts compatibility with Postgres and MySQL, complete with compatible drivers. This means that connecting to your Aurora database as if it were a Postgres or MySQL database is seamlessly achieved.

What sets Aurora apart is its cloud optimization. Through a series of optimizations and ingenious strategies, it achieves remarkable performance gainsâ€”5 times faster than MySQL on RDS and 3 times faster than Postgres on RDS, among other improvements. The intricacies of these optimizations, while intriguing, will not be delved into at present.

## Storage Marvels

Aurora's storage is a marvel in itself, automatically expanding from an initial 10GB to a capacious 128TB as more data is infused. This negates the need for manual monitoring, offering a boon to Database Administrators and System Operators.

## Replication and Failover

When it comes to replication, Aurora outpaces MySQL with sub-10ms replica lag, and failovers occur instantaneously. Its cloud-native nature ensures high availability by default, despite the marginal 20% increase in cost compared to RDS. At scale, the efficiency of Aurora translates into significant savings.

## High Availability and Read Scaling

Now, let us focus on the pivotal aspects of high availability and read scaling. Aurora stands out by storing six copies of data across three Availability Zones (AZs). For write operations, it requires only four out of six copies, ensuring continued functionality even if one AZ faces an outage. Similarly, for reads, three out of six copies suffice, enhancing availability.

A self-healing process comes into play, rectifying corrupted or faulty data through peer-to-peer replication. The reliance on hundreds of volumes, coupled with automatic expansion and replication, substantially mitigates risks.

From a diagrammatic perspective, envision three AZs, a shared storage volume, and logical volumes handling replication, self-healing, and auto-expanding. Each write operation results in six copies distributed across different AZs, ensuring robustness.

## Architectural Insights

In terms of architecture, Aurora resembles multi-AZ for RDS. A single instance, the master, handles write operations, with failovers occurring swiftly. Up to 15 read replicas serve read requests, and any of these replicas can seamlessly take over as the master in case of a failure.

Cross-region replication is supported by read replicas, further enhancing flexibility. The storage infrastructure, with its self-healing and auto-expanding characteristics, is a crucial element managed in the background, reducing the administrative burden.

## Client Interactions

Considering client interactions, a shared storage volume, ranging from 10GB to 128GB, is exclusively written to by the master. A writer endpoint, a DNS name, consistently points to the master, even during failovers. Read replicas, supported by auto-scaling, introduce a reader endpoint to handle connection load balancing and automatic redirection to the appropriate replica.

## Conclusion

In conclusion, Amazon Aurora is a cluster of instances orchestrated for optimal performance. Its features, such as auto-expanding storage, seamless failovers, and read scaling through read replicas, make it a formidable choice. The writer endpoint ensures consistent connectivity to the master, while the reader endpoint facilitates load balancing for read replicas. Remember this architecture, and you shall master the intricacies of Aurora.

As we conclude this lecture, ponder upon the comprehensive features Aurora brings to the table: automatic failover, backup and recovery, isolation and security, industry compliance, push-button scaling via auto-scaling, automated patching with zero downtime, advanced monitoring, and routine maintenance. Additionally, the unique backtrack feature empowers users to restore data to any point in time, showcasing the prowess of this AWS gem.

Until our next lecture, may your understanding of Amazon Aurora be as robust as its architecture.

## Recap

Following the previous blogs in the series.

- [AWS 1: BookClub Overview](https://magicishaqblog.netlify.app/aws/)
- [AWS 2: Getting Started](https://magicishaqblog.netlify.app/2023-01-23-aws-2-getting-started/)
- [AWS 3: UI Guide and Walk through](https://magicishaqblog.netlify.app/2023-01-27-aws-3-UI-guide-and-walkthrough)
- [AWS 4: IAM Creating Users and Groups](https://magicishaqblog.netlify.app/2023-01-28-aws-4-IAM)
- [AWS 5: IAM Policies](https://magicishaqblog.netlify.app/2023-02-03-aws-5-IAM-polices)
- [AWS 6: Quiz 1 ](https://magicishaqblog.netlify.app/aws-quiz-one)
- [AWS 7: AWS CLI , How to install the CLI](https://magicishaqblog.netlify.app/2023-10-03-aws-7-cli)
- [AWS 8: Access keys](https://magicishaqblog.netlify.app/2023-10-03-aws-8-access-keys)
- [AWS 9: AWS roles](https://magicishaqblog.netlify.app/2023-02-17-aws-9-roles)
- [AWS 10: EC2 Introduction](https://magicishaqblog.netlify.app/2023-02-24-aws-10-EC2/)
- [AWS 11: EC2 View and Instance Types](https://magicishaqblog.netlify.app/2023-03-03-aws-11-EC2-View-and-instance-types)
- [AWS 12: Security Groups](https://magicishaqblog.netlify.app/2023-03-10-aws-12-security-groups)
- [AWS 13: EC2 SSH-ing into an instance](https://magicishaqblog.netlify.app/2023-03-17-aws-13-ssh)
- [AWS 14: Instance Connect](https://magicishaqblog.netlify.app/2023-03-24-aws-14-instance-connect)
- [AWS 15: EC2 Purchasing Options](https://magicishaqblog.netlify.app/2023-03-31-aws-15-EC2-purchasing-options)
- [AWS 16: EBS Overview and Hands on](https://magicishaqblog.netlify.app/2023-04-14-aws-16-EBS-Overview-and-Hands-On)
- [AWS 17: EBS Snapshots](https://magicishaqblog.netlify.app/2023-04-21-aws-17-ebs-snapshots)
- [AWS 18: AMI Overview](https://magicishaqblog.netlify.app/2023-04-28-aws-18-ami)
- [AWS 19: AMI Hands On](https://magicishaqblog.netlify.app/2023-06-02-aws-19-AMI-Hands-On)
- [AWS 20: EC2 Instance Stores](https://magicishaqblog.netlify.app/2023-06-09-aws-20-EC2-Instance-Store)
- [AWS 21: EBS Volume types](https://magicishaqblog.netlify.app/2023-06-16-aws-21-EBS-volume-types)
- [AWS: 22: EBS Multi Attach](https://magicishaqblog.netlify.app/2023-06-23-aws-22-EBS-Multi-Attach)
- [AWS: 23: EFS Elastic File System](https://magicishaqblog.netlify.app/2023-06-30-aws-23-EFS-Elastic-File-System)
- [AWS 24: EFS Hands On](https://magicishasblog.netlify.app/2023-07-07-aws-24-EFS-Hands-On)
- [AWS 25: EFS vs EBS](https://magicishasblog.netlify.app/2023-07-14-aws-25-EFS-vs-EBS)
- [AWS 26: Quiz 2](https://magicishaqblog.netlify.app/quiz-2/2023-07-21-aws-26-quiz-2/)
- [AWS 27: High Availability and Scalability ](https://magicishaqblog.netlify.app/section6/2023-07-28-high_availability_and_scalability/)
- [AWS 28: Elastic Load Balancer](https://magicishaqblog.netlify.app/ElasticLoadBalancing/2023-08-11-aws-28-elastic-load-balancing/)
- [AWS 29: Application Load Balancer](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-08-18-aws-29-applicaton-load-balancer/)
- [AWS 30: Alb hands on (part 1)](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-08-25-aws-30-alb-hands-on/)
- [AWS 31: Alb hands on (part 2)](https://magicishaqblog.netlify.app/ApplicationLoadBalancer/2023-09-01-aws-31-more-on-alb/)
- [AWS 32: Network load balancer](https://magicishaqblog.netlify.app/NLB/2023-09-09-aws-32-network-load-balancer/)
- [AWS 33: Network load balancer (hands on)](https://magicishaqblog.netlify.app/NLB/2023-09-15-aws-33-network-load-balancer-hands-on/)
- [AWS 34: Gateway load balancer](https://magicishaqblog.netlify.app/GatewayLoadBalancer/2023-09-22-aws-34-gateway-load-balancer/)
- [AWS 35: ELB Sticky Sessions](https://magicishaqblog.netlify.app/ElasticLoadBalancing/2022-09-29-aws-35-ELB-Sticky-sessions/)
- [AWS 36: Cross Zone Load Balancing](https://magicishaqblog.netlify.app/CrossZoneLoadBalancing/2023-10-06-aws-36-cross-zone-load-balancing/)
- [AWS 37: ALB SSL Cert](https://magicishaqblog.netlify.app/ElasticLoadBalancing/2023-10-13-aws-37-ALB-SSL-Cert/)
- [AWS 38: ALB SSL Hands On](https://magicishaqblog.netlify.app/ElasticLoadBalancing/2023-10-20-aws-38-ALB-SSL-Hands-On/)
- [AWS 39: Connection Draining](https://magicishaqblog.netlify.app/2023-27-10-aws-39-connection-draining/)
- [AWS 40: Auto Scaling Groups](https://magicishaqblog.netlify.app/2023-11-10-aws-40-Auto-Scaling-Groups/)
- [AWS 41: Auto Scaling Groups : Hands On](https://magicishaqblog.netlify.app/2023-11-17-aws-41-auto-scaling-groups-hands-on/)
- [AWS 42: Auto Scaling Groups Policy](https://magicishaqblog.netlify.app/2023-11-24-aws-42-Auto-Scaling-Groups-Policy/)
- [AWS 43: Auto Scaling Groups Policy - Hands On](https://magicishaqblog.netlify.app/2023-12-01-aws-43-auto-scaling-groups-hands-on/)
- [AWS 44: Auto Scaling Groups - Instant Refresh](https://magicishaqblog.netlify.app/2023-12-08-aws-44-auto-scaling-groups-instant-refresh/)
- [AWS 45: Quiz 3](https://magicishaqblog.netlify.app/quiz-3/2023-12-15-aws-45-quiz-3/)
- [AWS 46: RDS Relational Database Service](https://magicishaqblog.netlify.app/2023-12-22-aws-46-RDS/)
- [AWS 47: RDS Read Replica Multi Az](https://magicishaqblog.netlify.app/2023-29-12-aws-47-RDS-read-replica-Multi-Az/)
- [AWS 48: RDS Hands On](https://magicishaqblog.netlify.app/2023-05-01-aws-48-RDS-Hands-On/)
